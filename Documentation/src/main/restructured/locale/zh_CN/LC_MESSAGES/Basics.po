# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-05 01:40-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../Basics.rst:2
msgid "Basics"
msgstr ""

#: ../../Basics.rst:5
msgid "Create XMPP client instance"
msgstr ""

#: ../../Basics.rst:7
msgid ""
"To use TigaseSwift library you need to create instance of ``XMPPClient`` "
"class which is implementation of XMPP client."
msgstr ""

#: ../../Basics.rst:14
msgid "Register required modules"
msgstr ""

#: ../../Basics.rst:16
msgid ""
"Next step is to register modules providing support for features you would"
" like to use. Almost in any case you will need at least following "
"modules:"
msgstr ""

#: ../../Basics.rst:18
msgid "``StreamFeaturesModule``"
msgstr ""

#: ../../Basics.rst:20
msgid "Responsible for handling XMPP stream features"
msgstr ""

#: ../../Basics.rst:22
msgid "``AuthModule`` and ``SaslModule``"
msgstr ""

#: ../../Basics.rst:24
msgid ""
"``AuthModule`` add common authentication features, while ``SaslModule`` "
"add support for SASL based authentication."
msgstr ""

#: ../../Basics.rst:26
msgid "``ResourceBinderModule``"
msgstr ""

#: ../../Basics.rst:28
msgid ""
"Module responsible for resource binding which is part of stream "
"negotiation process."
msgstr ""

#: ../../Basics.rst:30
msgid "``SessionEstablishmentModule``"
msgstr ""

#: ../../Basics.rst:32
msgid ""
"Module handles session establishment which is last step of stream "
"negotiation, however it is not needed according to `RFC 6120 "
"<http://xmpp.org/rfcs/rfc6120.html>`__. We recommend to register this "
"module for compatibility reasons - if it will be not needed then it will "
"not be used."
msgstr ""

#: ../../Basics.rst:34
msgid "To register, ie. ``StreamFeaturesModule`` you need to use following code:"
msgstr ""

#: ../../Basics.rst:41
msgid "Register additional modules you need"
msgstr ""

#: ../../Basics.rst:43
msgid ""
"You can add any additional modules found in TigaseSwift library or you "
"can create your own based by implementing support for ``XmppModule`` "
"protocol."
msgstr ""

#: ../../Basics.rst:45
msgid "Here is list of some modules provided by TigaseSwift library:"
msgstr ""

#: ../../Basics.rst:47
msgid "``PresenceModule``"
msgstr ""

#: ../../Basics.rst:49
msgid ""
"Responsible for handling incoming presences and allows to set client "
"presence."
msgstr ""

#: ../../Basics.rst:51
msgid "``MessageModule``"
msgstr ""

#: ../../Basics.rst:53
msgid ""
"This module is responsible for processing incoming messages, "
"creating/destroying chats and sending messages."
msgstr ""

#: ../../Basics.rst:55
msgid "``RosterModule``"
msgstr ""

#: ../../Basics.rst:57
msgid "Provides support for retrieval and manipulation of XMPP roster."
msgstr ""

#: ../../Basics.rst:59
msgid "``MucModule``"
msgstr ""

#: ../../Basics.rst:61
msgid ""
"Provides support for MUC rooms as described in `XEP-0045: Multi-User Chat"
" <http://xmpp.org/extensions/xep-0045.html>`__"
msgstr ""

#: ../../Basics.rst:63
msgid "``DiscoveryModule``"
msgstr ""

#: ../../Basics.rst:65
msgid ""
"Provides support for service discovery described in `XEP-0030: Service "
"Discovery <http://xmpp.org/extensions/xep-0030.html>`__"
msgstr ""

#: ../../Basics.rst:67
msgid "``StreamManagementModule``"
msgstr ""

#: ../../Basics.rst:69
msgid ""
"Provides support for Stream Management acking and stream resumption as "
"specified in `XEP-0198: Stream Management "
"<http://xmpp.org/extensions/xep-0198.html>`__"
msgstr ""

#: ../../Basics.rst:71
msgid "``MessageCarbonsModule``"
msgstr ""

#: ../../Basics.rst:73
msgid ""
"Adds support for forwarding messages delivered to other resources as "
"described in `XEP-0280: Message Carbons "
"<http://xmpp.org/extensions/xep-0280.html>`__"
msgstr ""

#: ../../Basics.rst:75
msgid "``VCardModule``"
msgstr ""

#: ../../Basics.rst:77
msgid ""
"Implementation of support for `XEP-0054: vcard-temp "
"<http://xmpp.org/extensions/xep-0054.html>`__"
msgstr ""

#: ../../Basics.rst:79
msgid "``PingModule``"
msgstr ""

#: ../../Basics.rst:81
msgid ""
"Allows to check if other XMPP client is available and it is possible to "
"deliver packet to this XMPP client as specified in `XEP-0199: XMPP Ping "
"<http://xmpp.org/extensions/xep-0199.html>`__"
msgstr ""

#: ../../Basics.rst:83
msgid "``InBandRegistrationModule``"
msgstr ""

#: ../../Basics.rst:85
msgid ""
"Adds possibility to register XMPP account using `XEP-0077: In-Band "
"Registration <http://xmpp.org/extensions/xep-0077.html>`__"
msgstr ""

#: ../../Basics.rst:87
msgid "``MobileModeModule``"
msgstr ""

#: ../../Basics.rst:89
msgid "Provides support for using Tigase Optimizations for mobile devices"
msgstr ""

#: ../../Basics.rst:91
msgid "``CapabilitiesModule``"
msgstr ""

#: ../../Basics.rst:93
msgid ""
"Provides support for `XEP-0115: Entity Capabilities "
"<http://xmpp.org/extensions/xep-0115.html>`__ which allows for "
"advertisement and automatic discovery of features supported by other "
"clients."
msgstr ""

#: ../../Basics.rst:96
msgid "Provide credentials needed for authentication"
msgstr ""

#: ../../Basics.rst:98
msgid "This should be done using ``connectionConfiguration`` properties, ie."
msgstr ""

#: ../../Basics.rst:106
msgid ""
"To use ANONYMOUS authentication mechanism, do not set user jid and "
"password. Instead just set server domain:"
msgstr ""

#: ../../Basics.rst:113
msgid "Register for connection related events"
msgstr ""

#: ../../Basics.rst:115
msgid "There are three event related to connection state which should be handled:"
msgstr ""

#: ../../Basics.rst:117
msgid "``SocketConnector.ConnectedEvent``"
msgstr ""

#: ../../Basics.rst:119
msgid ""
"Fired when client opens TCP connection to server - XMPP stream is not "
"ready at this point."
msgstr ""

#: ../../Basics.rst:121
msgid "``SessionEstablishmentModule.SessionEstablishmentSuccessEvent``"
msgstr ""

#: ../../Basics.rst:123
msgid ""
"Fired when client finishes session establishment. It will be called even "
"if ``SessionEstablishmentModule`` is not registered."
msgstr ""

#: ../../Basics.rst:125
msgid "``SocketConnector.DisconnectedEvent``"
msgstr ""

#: ../../Basics.rst:127
msgid ""
"Fired when TCP connection is closed or when XMPP stream is closed. It "
"will be also called when TCP connection is broken."
msgstr ""

#: ../../Basics.rst:130
msgid "Login"
msgstr ""

#: ../../Basics.rst:132
msgid ""
"To start process of DNS resolution, establishing TCP connection and "
"establishing XMPP stream you need to call:"
msgstr ""

#: ../../Basics.rst:139
msgid "Disconnect"
msgstr ""

#: ../../Basics.rst:141
msgid ""
"To disconnect from server properly and close XMPP and TCP connection you "
"need to call:"
msgstr ""

#: ../../Basics.rst:148
msgid "Sending custom stanza"
msgstr ""

#: ../../Basics.rst:150
msgid ""
"Usually class which supports ``XmppModule`` protocol is being implemented"
" to add new feature to ``TigaseSwift`` library. However in some cases in "
"which we want to send simple stanza or send stanza and react on received "
"response there is no need to implement class supporting ``XmppModule`` "
"protocol. Instead of that following methods may be used."
msgstr ""

#: ../../Basics.rst:154
msgid "Sending stanza without waiting for response"
msgstr ""

#: ../../Basics.rst:156
msgid ""
"To send custom stanza you need to construct this stanza and execute "
"following code"
msgstr ""

#: ../../Basics.rst:162
msgid ""
"``writer`` is instance of ``PacketWriter`` class responsible for sending "
"stanzas from client to server. Property can be nil if connection is not "
"established."
msgstr ""

#: ../../Basics.rst:166
msgid "Sending stanza and waiting for response (closures)"
msgstr ""

#: ../../Basics.rst:168 ../../Basics.rst:188 ../../Basics.rst:203
msgid ""
"It possible to wait for response stanza, but only in case of ``Iq`` "
"stanzas. To do so, you need to pass callback which will be called when "
"result will be received, ie."
msgstr ""

#: ../../Basics.rst:180
msgid ""
"You can omit ``timeout`` parameter. Default value of 30 seconds will be "
"used as a timeout."
msgstr ""

#: ../../Basics.rst:182
msgid ""
"You can pass nil as any of closures. In this case particular response "
"will not trigger any reaction."
msgstr ""

#: ../../Basics.rst:186
msgid "Sending stanza and waiting for response (closure)"
msgstr ""

#: ../../Basics.rst:196 ../../Basics.rst:211
msgid ""
"You can omit ``timeout`` parameter, which will use 30 seconds as default "
"timeout."
msgstr ""

#: ../../Basics.rst:198
msgid ""
"As callback is called always as it will be called in case of received "
"``result``, ``error`` or in case of timeout it is required to be able to "
"distinguish what caused execution of this closure. In case of ``result`` "
"or ``error`` packet being received, received stanza will be passed to "
"closure for processing. However in case of timeout ``nil`` will be passed"
" instead of stanza - as no stanza was received."
msgstr ""

#: ../../Basics.rst:201
msgid "Sending stanza and waiting for response (AsyncCallback)"
msgstr ""

#: ../../Basics.rst:209
msgid "where callback is implementation of ``AsyncCallback`` protocol."
msgstr ""

